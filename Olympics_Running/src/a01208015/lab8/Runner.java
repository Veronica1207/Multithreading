
package a01208015.lab8;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

/**
 * This class describes a Runner
 * 
 * @author Veronica A01208105
 * @version 2020-11-14
 */
public class Runner extends Thread {

	private int lane;
	private int bib;
	private String country;
	private String lastName;
	private String firstName;
	private long reaction;
	public static Map<Runner, Long> runners;

	/**
	 * Overloaded constructor
	 * 
	 * @param lane      is the runner's lane
	 * @param bib       is the runner's number
	 * @param country   is the runner's country
	 * @param lastName  is the runner's last name
	 * @param firstName is the runner's first name
	 * @param reaction  is the runner's reaction time in the beggining of the race
	 */
	public Runner(int lane, int bib, String country, String lastName, String firstName, long reaction) {
		super();
		setLane(lane);
		setBib(bib);
		setCountry(country);
		setLastName(lastName);
		setFirstName(firstName);
		setReaction(reaction);
	}

	/**
	 * Accessor for the field
	 * 
	 * @return the line as an int
	 */
	public int getLane() {
		return lane;
	}

	/**
	 * Mutator for the field
	 * 
	 * @param line the line to set
	 */
	public void setLane(int lane) {
		if (lane > 0) {
			this.lane = lane;
		} else {
			System.out.println("Lane number cannot be negative");
		}
	}

	/**
	 * Accessor for the field
	 * 
	 * @return the bib as an int
	 */
	public int getBib() {
		return bib;
	}

	/**
	 * Mutator for the field
	 * 
	 * @param bib the bib to set
	 */
	public void setBib(int bib) {
		if(bib > 0) {
		this.bib = bib;
		} else {
			System.out.println("Bib# cannot be negative");
		}
	}

	/**
	 * Accessor for the field
	 * 
	 * @return the country as a String
	 */
	public String getCountry() {
		return country;
	}

	/**
	 * Mutator for the field
	 * 
	 * @param country the country to set
	 */
	public void setCountry(String country) {
		if(country != null && !country.trim().isEmpty()) {
		this.country = country;
		} else {
			this.country = "ANA"; //Authorised Neutral Athletes
		}
	}

	/**
	 * Accessor for the field
	 * 
	 * @return the lastName as a String
	 */
	public String getLastName() {
		return lastName;
	}

	/**
	 * Mutator for the field
	 * 
	 * @param lastName the lastName to set
	 */
	public void setLastName(String lastName) {
		if(lastName != null && !lastName.trim().isEmpty()) {
		this.lastName = lastName.toUpperCase();
		} else {
			System.out.println("Last Name is a required field");
		}
	}

	/**
	 * Accessor for the field
	 * 
	 * @return the firstName as a String
	 */
	public String getFirstName() {
		return firstName;
	}

	/**
	 * Mutator for the field
	 * 
	 * @param firstName the firstName to set
	 */
	public void setFirstName(String firstName) {
		if(firstName != null && !firstName.trim().isEmpty()) {
		this.firstName = firstName;
		} else {
			System.out.println("First Name is a required field");
		}
	}

	/**
	 * Accessor for the field
	 * 
	 * @return the reaction as a long
	 */
	public long getReaction() {
		return reaction;
	}

	/**
	 * Mutator for the field
	 * 
	 * @param reaction the reaction to set
	 */
	public void setReaction(long reaction) {
		if (reaction >= 0) {
		this.reaction = reaction;
		} else {
			System.out.println("The reaction value cannot be negative");
		}
	}

	/**
	 * Override run() method of Thread class
	 */
	public void run() {
		 System.out.println("My thread is running");

		generateResults();

		 System.out.println("My thread finished running");
	}

	/**
	 * Method to generate results of the race
	 */
	public void generateResults() {
		long result = 0;
		long delay = 0;
		Random randomDelay = new Random();
		runners = new HashMap<Runner, Long>();

		try {
			for (int i = 0; i < 100; i++) {
				if (i == 0) {
					Thread.sleep(getReaction());
					result += getReaction();
				}
				delay = 90L + randomDelay.nextInt(16);
				result += delay;
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		runners.put(new Runner(getLane(), getBib(), getCountry(), getLastName(), getFirstName(), getReaction()),
				result);
		// System.out.format("Result generated by the method: %d%n", result);
	}

	/**
	 * toString() method for debugging
	 */
	@Override
	public String toString() {
		return "Runner [lane=" + lane + ", bib=" + bib + ", country=" + country + ", lastName=" + lastName
				+ ", firstName=" + firstName + ", reaction=" + reaction + "]";
	}

}
